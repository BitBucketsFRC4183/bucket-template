plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2023.1.1"
}

group 'org.bitbuckets'

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest("org.bitbuckets.bootstrap.Main")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = 4183
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)
deploy.targets.roborio.artifacts.frcJava.jarTask = jar

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    implementation project(":bucket-lib")
    implementation project(":bucket-shared")
    implementation project(":bucket-drive")

    //roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    //roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    //roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    //roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    //nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    //nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    //simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    //nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    //simulationRelease wpi.sim.enableRelease()
}


//I HATE THIS
//I FUCKING HATE WPILIB
//I HATE IT HERE
//THIS IS STUPID
//JUST USE NORMAL MAVEN DEPENDENCIES HOLY SHIT IS IT THAT HARD
//i fixed the swerve drive

import org.gradle.internal.os.OperatingSystem; //this is so fucking stupid but its OFFICIAL FRC CODE (off myself)
parent.subprojects {

    repositories {
        String frcYear = '2023'
        File frcHome
        if (OperatingSystem.current().isWindows()) {
            String publicFolder = System.getenv('PUBLIC')
            if (publicFolder == null) {
                publicFolder = "C:\\Users\\Public"
            }
            def homeRoot = new File(publicFolder, "wpilib")
            frcHome = new File(homeRoot, frcYear)
        } else {
            def userFolder = System.getProperty("user.home")
            def homeRoot = new File(userFolder, "wpilib")
            frcHome = new File(homeRoot, frcYear)
        }
        def frcHomeMaven = new File(frcHome, 'maven')
        String name = frcHomeMaven.toString();

        maven {
            url name
        }
    }

    dependencies {
        implementation wpi.java.deps.wpilib()
        implementation wpi.java.vendor.java()
    }


}

RepositoryHandler s = this.getRepositories();

parent.getRepositories().addAll(s.collect())